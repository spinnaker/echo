/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
      korkVersion = "5.0.0"
      fiatVersion = "1.0.0"
    }
    repositories {
        jcenter()
        maven { url 'https://spinnaker.bintray.com/gradle/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.netflix.spinnaker.gradle:spinnaker-dev-plugin:6.3.0"
        if (Boolean.valueOf(enablePublishing)) {
            classpath "com.netflix.spinnaker.gradle:spinnaker-gradle-project:6.3.0"
        }
    }
}

allprojects {
    group = "com.netflix.spinnaker.echo"
    apply plugin: "spinnaker.base-project"
    if (Boolean.valueOf(enablePublishing)) {
        apply plugin: "spinnaker.project"
    }
    apply plugin: "java-library"
    apply plugin: "groovy"
    apply plugin: 'jacoco'

    group = "com.netflix.spinnaker.echo"

    test {
      testLogging {
        exceptionFormat = 'full'
      }
    }

    tasks.withType(JavaExec) {
      if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8189'
      }
    }

}

subprojects {
    jacoco {
        toolVersion = '0.8.3'
    }

    dependencies {
        implementation platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
        annotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
        testAnnotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"

        implementation "org.codehaus.groovy:groovy-all"
        implementation "com.github.ben-manes.caffeine:guava"
        implementation "com.netflix.spectator:spectator-api"
        implementation "org.slf4j:slf4j-api"
        implementation "net.logstash.logback:logstash-logback-encoder"
        implementation "org.springframework.boot:spring-boot-properties-migrator"

        testImplementation "org.spockframework:spock-core"

        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.spockframework:spock-core"
        testImplementation "org.spockframework:spock-spring"
        testImplementation "org.springframework:spring-test"
        testImplementation "org.hamcrest:hamcrest-core"
        testRuntimeOnly "cglib:cglib-nodep"
        testRuntimeOnly "org.objenesis:objenesis"
    }
}

defaultTasks ':echo-web:run'
