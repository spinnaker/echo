/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
  springProfiles = System.getProperty('spring.profiles.active', "test,local")
}

apply plugin: 'spinnaker.application'

mainClassName = 'com.netflix.spinnaker.echo.Application'

dependencies {
    compile project(':echo-artifacts')
    compile project(':echo-core')
    compile project(':echo-model')
    compile project(':echo-notifications')
    compile project(':echo-pipelinetriggers')
    compile project(':echo-scheduler')
    compile project(':echo-rest')
    compile project(':echo-webhooks')
    compile project(':echo-pubsub-core')
    compile project(':echo-pubsub-aws')
    compile project(':echo-pubsub-google')
    compile spinnaker.dependency('kork')
    compile spinnaker.dependency('korkStackdriver')
    compile spinnaker.dependency('korkWeb')
    compile spinnaker.dependency('bootActuator')
    compile spinnaker.dependency('bootWeb')
    compile spinnaker.dependency('jacksonDatabind')
    compile spinnaker.dependency('spectatorApi')
    compile "org.springframework.data:spring-data-rest-webmvc:2.6.10.RELEASE"
    testCompile spinnaker.dependency('spockSpring')
    testCompile spinnaker.dependency('springTest')
}

run {
    def jamm = project.configurations.compile.find { it.name.startsWith('jamm') }
    if (jamm) {
        jvmArgs applicationDefaultJvmArgs.join(" ") + " -javaagent:${jamm}"
    }
    systemProperty('spring.config.location', project.springConfigLocation)
    systemProperty('spring.profiles.active', project.springProfiles)
}

test {
    // jamm is required when using prepared statements with in-memory C*
    def jamm = project.configurations.compile.find { it.name.startsWith('jamm') }
    if (jamm) {
        jvmArgs applicationDefaultJvmArgs.join(" ") + " -javaagent:${jamm}"
    }
}
