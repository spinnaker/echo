/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
}

apply plugin: 'application'
apply plugin: 'spring-boot'
apply plugin: 'project-report'
apply plugin: 'nebula.ospackage'

ext {
    applicationName = 'echo'
    applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
}

//applicationDistribution.from(project.file('config')) {
//    into 'config'
//}

springBoot {
    mainClass = 'com.netflix.spinnaker.echo.Application'
}

dependencies {
    compile project(':echo-core')
    compile project(':echo-model')
    compile project(':echo-notifications')
    compile project(':echo-pipelinetriggers')
    compile project(':echo-scheduler')
    compile project(':echo-rest')
    compile project(':echo-webhooks')
    compile spinnaker.dependency('kork')
    compile spinnaker.dependency('korkWeb')
    compile spinnaker.dependency('bootActuator')
    compile spinnaker.dependency('bootWeb')
    compile spinnaker.dependency('jacksonDatabind')
    testCompile spinnaker.dependency('spockSpring')
    testCompile spinnaker.dependency('springTest')
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
    def jamm = project.configurations.compile.find { it.name.startsWith('jamm') }
    if (jamm) {
        jvmArgs applicationDefaultJvmArgs.join(" ") + " -javaagent:${jamm}"
    }
    systemProperty('spring.config.location', project.springConfigLocation)
}

test {
    // jamm is required when using prepared statements with in-memory C*
    def jamm = project.configurations.compile.find { it.name.startsWith('jamm') }
    if (jamm) {
        jvmArgs applicationDefaultJvmArgs.join(" ") + " -javaagent:${jamm}"
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'config'
        }
    }
}

jar {
    baseName applicationName
    doFirst {
        exclude "${rootProject.name}.yml"
    }
}

startScripts {
    defaultJvmOpts = applicationDefaultJvmArgs + ["-Dspring.config.location=/opt/spinnaker/config/"]
    doLast {
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=', '''\
            if [ -f /etc/default/spinnaker ]; then
              set -a
              . /etc/default/spinnaker
              set +a
            fi
            DEFAULT_JVM_OPTS='''.stripIndent())
        unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/config:$APP_HOME')
        windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\config;')
    }
}

String toVers(String v) {
  int idx = v.indexOf('-')
  if (idx != -1) {
    return v.substring(0, idx)
  }
  return v
}

ospackage {
    packageName = "spinnaker-" + project.applicationName
    version = toVers(project.version.toString())
    release '3'
    os = LINUX

    // installer scripts
    postInstall = file('pkg_scripts/postInstall.sh')
    postUninstall = file('pkg_scripts/postUninstall.sh')

    from "${project.buildDir}/install/${project.applicationName}"
        into "/opt/${project.applicationName}"

    from(file('etc/init/echo.conf')) {
        into('/etc/init')
        user = 'root'
        permissionGroup = 'root'
        fileType = CONFIG | NOREPLACE
    }

    from(file('etc/logrotate.d/echo')) {
        into('/etc/logrotate.d')
        user = 'root'
        permissionGroup = 'root'
        fileMode = 0644
        fileType = CONFIG | NOREPLACE
    }

}


buildDeb {
  dependsOn installDist
}
