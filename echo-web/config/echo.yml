server:
  port: 8089

spinnaker:
  cassandra:
    cluster: 'spinnaker'
    keyspace: 'echo'
  baseUrl: ${services.deck.baseUrl:http://localhost:9000}

front50:
  baseUrl: ${services.front50.baseUrl:http://localhost:8080}

igor:
  enabled: ${services.igor.enabled:false}
  baseUrl: ${services.igor.baseUrl:http://localhost:8088}

orca:
  enabled: ${services.orca.enabled:true}
  baseUrl: ${services.orca.baseUrl:http://localhost:8083}

search:
  index: 'event_history'

management.health.mail.enabled: false

spring.freemarker.enabled: false

webhooks:
  artifacts:
    enabled: false
    sources: []

scheduler:
  enabled: ${services.echo.cron.enabled:true}
  cron:
    timezone: ${global.spinnaker.timezone:America/Los_Angeles}

redis:
  connection: ${services.redis.baseUrl:redis://localhost:6379}
  enabled: ${services.redis.enabled:false}

resilience4j.circuitbreaker:
  instances:
    telemetry:
      # This needs to stay false, because if the telemetry endpoint goes down, Echo goes unhealthy (no good!)
      registerHealthIndicator: false
      # Warming up...
      minimumNumberOfCalls: 5
      slidingWindowSize: 10
      slidingWindowType: COUNT_BASED
      # When tripped...
      waitDurationInOpenState: 12h
      # Try to get back to a working state...
      permittedNumberOfCallsInHalfOpenState: 1

---
# This profile is used in sharded deployments for an Echo that handles only
# scheduled tasks.
spring:
  profiles: scheduler

scheduler:
  enabled: true

---
# This profile is used in sharded deployments for an Echo that handles all
# operations other than scheduled tasks.
spring:
  profiles: worker

scheduler:
  enabled: false
