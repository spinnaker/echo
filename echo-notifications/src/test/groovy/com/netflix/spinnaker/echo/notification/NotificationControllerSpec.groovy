/*
 * Copyright 2020 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.netflix.spinnaker.echo.notification

import com.jakewharton.retrofit.Ok3Client
import com.netflix.spinnaker.echo.api.Notification
import com.netflix.spinnaker.echo.api.Notification.InteractiveActionCallback
import com.netflix.spinnaker.echo.controller.NotificationController
import com.netflix.spinnaker.echo.notification.InteractiveNotificationCallbackHandler.SpinnakerService
import com.netflix.spinnaker.kork.web.exceptions.InvalidRequestException
import org.springframework.core.env.Environment
import org.springframework.http.HttpHeaders
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import retrofit.client.Response
import retrofit.mime.TypedByteArray
import spock.lang.Specification
import spock.lang.Subject

import static java.util.Collections.emptyList

class NotificationControllerSpec extends Specification {
  SpinnakerService spinnakerService
  InteractiveNotificationService notificationService
  InteractiveNotificationCallbackHandler callbackHandler

  @Subject
  NotificationController notificationController

  void setup() {
    notificationService = Mock()
    spinnakerService = Mock()
    callbackHandler = new InteractiveNotificationCallbackHandler(
      new Ok3Client(),
      [ notificationService ],
      Mock(Environment),
      [ "test": spinnakerService ]
    )
    notificationController = new NotificationController(
      notificationServices: [ notificationService ],
      callbackHandler: callbackHandler
    )
  }

  void 'creating a notification delegates to the appropriate service'() {
    given:
    Notification notification = new Notification()
    notification.notificationType = Notification.Type.SLACK

    notificationService.supportsType(Notification.Type.SLACK) >> true

    when:
    notificationController.create(notification)

    then:
    1 * notificationService.handle(notification)
  }

  void 'an incoming callback from the notification service delegates to the appropriate service class'() {
    given:
    HttpHeaders headers = new HttpHeaders()
    String body = "blah"
    Map params = [:]

    InteractiveActionCallback callbackObject = new InteractiveActionCallback()
    callbackObject.serviceId = "test"
    callbackObject.user = "john.doe"

    notificationService.supportsType(Notification.Type.SLACK) >> true
    spinnakerService.notificationCallback(*_) >> { mockResponse() }

    when:
    notificationController.processCallback("slack", headers, body, params)

    then:
    1 * notificationService.parseInteractionCallback(headers, body, params) >> callbackObject
    1 * notificationService.respondToCallback(body) >> { Optional.empty() }
  }

  void 'handling of the incoming callback throws an exception if Spinnaker service config not found'() {
    given:
    HttpHeaders headers = new HttpHeaders()
    String body = "blah"
    Map params = [:]

    InteractiveActionCallback callbackObject = new InteractiveActionCallback()
    callbackObject.serviceId = "unknown"
    callbackObject.user = "john.doe"

    notificationService.supportsType(Notification.Type.SLACK) >> true
    notificationService.parseInteractionCallback(headers, body, params) >> callbackObject

    when:
    notificationController.processCallback("slack", headers, body, params)

    then:
    thrown(InvalidRequestException)
  }

  void 'handling of the incoming callback returns the response generated by the corresponding service class'() {
    given:
    HttpHeaders headers = new HttpHeaders()
    String body = "blah"
    Map params = [:]
    ResponseEntity<String> expectedResponse = new ResponseEntity(HttpStatus.OK)

    InteractiveActionCallback callbackObject = new InteractiveActionCallback()
    callbackObject.serviceId = "test"
    callbackObject.user = "john.doe"

    notificationService.supportsType(Notification.Type.SLACK) >> true
    spinnakerService.notificationCallback(*_) >> { mockResponse() }

    when:
    ResponseEntity<String> response = notificationController.processCallback("slack", headers, body, params)

    then:
    1 * notificationService.parseInteractionCallback(headers, body, params) >> callbackObject
    1 * notificationService.respondToCallback(body) >> { Optional.of(expectedResponse) }
    response == expectedResponse
  }

  static Response mockResponse() {
    new Response("url", 200, "nothing", emptyList(), new TypedByteArray("application/json", "response".bytes))
  }
}
